{"ast":null,"code":"var _jsxFileName = \"/home/khazad/Development/sd-011-project-recipes-app/src/pages/FoodsRecipeInProgress.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/RecipeInProgress.css';\nimport blackHeartIcon from '../images/blackHeartIcon.svg';\nimport whiteHeartIcon from '../images/whiteHeartIcon.svg';\nimport RenderFoodProgress from '../components/RenderFoodProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FoodsRecipeInProgress(_ref) {\n  _s();\n  let {\n    match: {\n      params: {\n        id\n      }\n    }\n  } = _ref;\n  const [mealInProgress, setMealInProgress] = useState('');\n  const [loading, setIsLoading] = useState(true);\n  const [finalListIngredients, setFinalListIngredients] = useState();\n  const [classNameIngredients, setClassNameIngredients] = useState([]);\n  const [statusIngredients, setStatusIngredients] = useState([]);\n  const [favoriteIcon, setFavoriteIcon] = useState(whiteHeartIcon);\n  const [hasChecked, setHasChecked] = useState(false);\n  const [statusEndRecipeButton, setStatusEndRecipeButton] = useState(true);\n  const [countCheckIngredList, setCountCheckIngredList] = useState(0);\n  const [numberIngredients, setNumberIngredients] = useState(0);\n  const ingredListClass = [];\n  const ingredList = [];\n  useEffect(() => {\n    const endpoint = `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`;\n    const getMealDetails = async () => {\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      const {\n        meals\n      } = data;\n      setMealInProgress(meals[0]);\n    };\n    getMealDetails();\n  }, []);\n  useEffect(() => {\n    const favoriteRecipes = JSON.parse(localStorage.getItem('favoriteRecipes')) || [];\n    const isFavorite = favoriteRecipes.some(recipe => recipe.id === id);\n    if (isFavorite) setFavoriteIcon(blackHeartIcon);\n  }, []);\n  useEffect(() => {\n    let inProgressRecipes = JSON.parse(localStorage.getItem('inProgressRecipes')) || []; // senão tiver nada é um array vazio\n    const ingredArray = Object.entries(mealInProgress).filter(key => key[0].includes('strIngredient') && key[1]);\n    ingredArray.forEach(item => ingredList.push(item[1]));\n    if (inProgressRecipes && !inProgressRecipes.meals) {\n      const arrayStatus = [];\n      ingredArray.forEach(() => {\n        ingredListClass.push('notChecked');\n        arrayStatus.push(false); // crio um array mesmo tamanho de n ingredientes\n      });\n\n      inProgressRecipes = {\n        ...inProgressRecipes,\n        meals: {\n          [id]: arrayStatus\n        }\n      };\n      localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n    }\n    const meals = inProgressRecipes.meals || {\n      meals: {}\n    };\n    let countYesChecked = 0;\n    const statusIngredSaved = meals[id] || [];\n    statusIngredSaved.forEach(item => {\n      // vou passar pelo array de status da comida atual, para criar o check css no item\n      if (item) {\n        countYesChecked += 1;\n        ingredListClass.push('yesChecked');\n      } else {\n        ingredListClass.push('notChecked');\n      }\n    });\n    setCountCheckIngredList(countYesChecked);\n    setStatusIngredients(statusIngredSaved);\n    setNumberIngredients(ingredList.length);\n    setClassNameIngredients(ingredListClass);\n    setFinalListIngredients(ingredList);\n    setIsLoading(false);\n    setFinalListIngredients(ingredList);\n  }, [mealInProgress]);\n  function renderComponentFoodProgress() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(RenderFoodProgress, {\n        strMealThumb: mealInProgress.strMealThumb,\n        strMeal: mealInProgress.strMeal,\n        strCategory: mealInProgress.strCategory,\n        strInstructions: mealInProgress.strInstructions,\n        strArea: mealInProgress.strArea,\n        id: id,\n        finalListIngredients: finalListIngredients,\n        classNameIngredients: classNameIngredients,\n        statusIngredients: statusIngredients,\n        statusEndRecipeButton: statusEndRecipeButton,\n        favoriteIcon: favoriteIcon,\n        setFavoriteIcon: setFavoriteIcon,\n        setHasChecked: setHasChecked,\n        setStatusIngredients: setStatusIngredients,\n        setClassNameIngredients: setClassNameIngredients,\n        setCountCheckIngredList: setCountCheckIngredList,\n        countCheckIngredList: countCheckIngredList,\n        numberIngredients: numberIngredients,\n        setStatusEndRecipeButton: setStatusEndRecipeButton,\n        hasChecked: hasChecked,\n        strTags: mealInProgress.strTags\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Carregando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this) : renderComponentFoodProgress()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(FoodsRecipeInProgress, \"2eauAJEGv6ORh4Hbx6W16UAlCOI=\");\n_c = FoodsRecipeInProgress;\nFoodsRecipeInProgress.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  }).isRequired\n};\nexport default FoodsRecipeInProgress;\nvar _c;\n$RefreshReg$(_c, \"FoodsRecipeInProgress\");","map":{"version":3,"names":["React","useEffect","useState","PropTypes","blackHeartIcon","whiteHeartIcon","RenderFoodProgress","FoodsRecipeInProgress","match","params","id","mealInProgress","setMealInProgress","loading","setIsLoading","finalListIngredients","setFinalListIngredients","classNameIngredients","setClassNameIngredients","statusIngredients","setStatusIngredients","favoriteIcon","setFavoriteIcon","hasChecked","setHasChecked","statusEndRecipeButton","setStatusEndRecipeButton","countCheckIngredList","setCountCheckIngredList","numberIngredients","setNumberIngredients","ingredListClass","ingredList","endpoint","getMealDetails","response","fetch","data","json","meals","favoriteRecipes","JSON","parse","localStorage","getItem","isFavorite","some","recipe","inProgressRecipes","ingredArray","Object","entries","filter","key","includes","forEach","item","push","arrayStatus","setItem","stringify","countYesChecked","statusIngredSaved","length","renderComponentFoodProgress","strMealThumb","strMeal","strCategory","strInstructions","strArea","strTags","propTypes","shape","string","isRequired"],"sources":["/home/khazad/Development/sd-011-project-recipes-app/src/pages/FoodsRecipeInProgress.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/RecipeInProgress.css';\nimport blackHeartIcon from '../images/blackHeartIcon.svg';\nimport whiteHeartIcon from '../images/whiteHeartIcon.svg';\nimport RenderFoodProgress from '../components/RenderFoodProgress';\n\nfunction FoodsRecipeInProgress({ match: { params: { id } } }) {\n  const [mealInProgress, setMealInProgress] = useState('');\n  const [loading, setIsLoading] = useState(true);\n  const [finalListIngredients, setFinalListIngredients] = useState();\n  const [classNameIngredients, setClassNameIngredients] = useState([]);\n  const [statusIngredients, setStatusIngredients] = useState([]);\n  const [favoriteIcon, setFavoriteIcon] = useState(whiteHeartIcon);\n  const [hasChecked, setHasChecked] = useState(false);\n  const [statusEndRecipeButton, setStatusEndRecipeButton] = useState(true);\n  const [countCheckIngredList, setCountCheckIngredList] = useState(0);\n  const [numberIngredients, setNumberIngredients] = useState(0);\n  const ingredListClass = [];\n  const ingredList = [];\n\n  useEffect(() => {\n    const endpoint = `https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`;\n    const getMealDetails = async () => {\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      const { meals } = data;\n      setMealInProgress(meals[0]);\n    };\n    getMealDetails();\n  }, []);\n\n  useEffect(() => {\n    const favoriteRecipes = JSON.parse(localStorage.getItem('favoriteRecipes')) || [];\n    const isFavorite = favoriteRecipes.some((recipe) => recipe.id === id);\n    if (isFavorite) setFavoriteIcon(blackHeartIcon);\n  }, []);\n\n  useEffect(() => {\n    let inProgressRecipes = JSON.parse(localStorage.getItem('inProgressRecipes')) || []; // senão tiver nada é um array vazio\n    const ingredArray = Object.entries(mealInProgress)\n      .filter((key) => key[0].includes('strIngredient') && key[1]);\n    ingredArray.forEach((item) => ingredList.push(item[1]));\n\n    if (inProgressRecipes && !inProgressRecipes.meals) {\n      const arrayStatus = [];\n      ingredArray.forEach(() => {\n        ingredListClass.push('notChecked');\n        arrayStatus.push(false); // crio um array mesmo tamanho de n ingredientes\n      });\n      inProgressRecipes = {\n        ...inProgressRecipes,\n        meals: {\n          [id]: arrayStatus,\n        },\n      };\n      localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n    }\n\n    const meals = inProgressRecipes.meals || { meals: {} };\n    let countYesChecked = 0;\n    const statusIngredSaved = meals[id] || [];\n    statusIngredSaved.forEach((item) => { // vou passar pelo array de status da comida atual, para criar o check css no item\n      if (item) {\n        countYesChecked += 1;\n        ingredListClass.push('yesChecked');\n      } else {\n        ingredListClass.push('notChecked');\n      }\n    });\n    setCountCheckIngredList(countYesChecked);\n    setStatusIngredients(statusIngredSaved);\n    setNumberIngredients(ingredList.length);\n    setClassNameIngredients(ingredListClass);\n    setFinalListIngredients(ingredList);\n    setIsLoading(false);\n    setFinalListIngredients(ingredList);\n  }, [mealInProgress]);\n\n  function renderComponentFoodProgress() {\n    return (\n      <div>\n        <RenderFoodProgress\n          strMealThumb={ mealInProgress.strMealThumb }\n          strMeal={ mealInProgress.strMeal }\n          strCategory={ mealInProgress.strCategory }\n          strInstructions={ mealInProgress.strInstructions }\n          strArea={ mealInProgress.strArea }\n          id={ id }\n          finalListIngredients={ finalListIngredients }\n          classNameIngredients={ classNameIngredients }\n          statusIngredients={ statusIngredients }\n          statusEndRecipeButton={ statusEndRecipeButton }\n          favoriteIcon={ favoriteIcon }\n          setFavoriteIcon={ setFavoriteIcon }\n          setHasChecked={ setHasChecked }\n          setStatusIngredients={ setStatusIngredients }\n          setClassNameIngredients={ setClassNameIngredients }\n          setCountCheckIngredList={ setCountCheckIngredList }\n          countCheckIngredList={ countCheckIngredList }\n          numberIngredients={ numberIngredients }\n          setStatusEndRecipeButton={ setStatusEndRecipeButton }\n          hasChecked={ hasChecked }\n          strTags={ mealInProgress.strTags }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <span>\n        { loading ? <p>Carregando...</p> : renderComponentFoodProgress() }\n      </span>\n    </div>\n  );\n}\n\nFoodsRecipeInProgress.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default FoodsRecipeInProgress;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAO,6BAA6B;AACpC,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,kBAAkB,MAAM,kCAAkC;AAAC;AAElE,SAASC,qBAAqB,OAAgC;EAAA;EAAA,IAA/B;IAAEC,KAAK,EAAE;MAAEC,MAAM,EAAE;QAAEC;MAAG;IAAE;EAAE,CAAC;EAC1D,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,OAAO,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACa,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGd,QAAQ,EAAE;EAClE,MAAM,CAACe,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAACiB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAACG,cAAc,CAAC;EAChE,MAAM,CAACkB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACuB,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACxE,MAAM,CAACyB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAAC2B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG5B,QAAQ,CAAC,CAAC,CAAC;EAC7D,MAAM6B,eAAe,GAAG,EAAE;EAC1B,MAAMC,UAAU,GAAG,EAAE;EAErB/B,SAAS,CAAC,MAAM;IACd,MAAMgC,QAAQ,GAAI,wDAAuDvB,EAAG,EAAC;IAC7E,MAAMwB,cAAc,GAAG,YAAY;MACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,CAAC;MACtC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClC,MAAM;QAAEC;MAAM,CAAC,GAAGF,IAAI;MACtBzB,iBAAiB,CAAC2B,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IACDL,cAAc,EAAE;EAClB,CAAC,EAAE,EAAE,CAAC;EAENjC,SAAS,CAAC,MAAM;IACd,MAAMuC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,EAAE;IACjF,MAAMC,UAAU,GAAGL,eAAe,CAACM,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACrC,EAAE,KAAKA,EAAE,CAAC;IACrE,IAAImC,UAAU,EAAEvB,eAAe,CAAClB,cAAc,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;EAENH,SAAS,CAAC,MAAM;IACd,IAAI+C,iBAAiB,GAAGP,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IACrF,MAAMK,WAAW,GAAGC,MAAM,CAACC,OAAO,CAACxC,cAAc,CAAC,CAC/CyC,MAAM,CAAEC,GAAG,IAAKA,GAAG,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,eAAe,CAAC,IAAID,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9DJ,WAAW,CAACM,OAAO,CAAEC,IAAI,IAAKxB,UAAU,CAACyB,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvD,IAAIR,iBAAiB,IAAI,CAACA,iBAAiB,CAACT,KAAK,EAAE;MACjD,MAAMmB,WAAW,GAAG,EAAE;MACtBT,WAAW,CAACM,OAAO,CAAC,MAAM;QACxBxB,eAAe,CAAC0B,IAAI,CAAC,YAAY,CAAC;QAClCC,WAAW,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC;;MACFT,iBAAiB,GAAG;QAClB,GAAGA,iBAAiB;QACpBT,KAAK,EAAE;UACL,CAAC7B,EAAE,GAAGgD;QACR;MACF,CAAC;MACDf,YAAY,CAACgB,OAAO,CAAC,mBAAmB,EAAElB,IAAI,CAACmB,SAAS,CAACZ,iBAAiB,CAAC,CAAC;IAC9E;IAEA,MAAMT,KAAK,GAAGS,iBAAiB,CAACT,KAAK,IAAI;MAAEA,KAAK,EAAE,CAAC;IAAE,CAAC;IACtD,IAAIsB,eAAe,GAAG,CAAC;IACvB,MAAMC,iBAAiB,GAAGvB,KAAK,CAAC7B,EAAE,CAAC,IAAI,EAAE;IACzCoD,iBAAiB,CAACP,OAAO,CAAEC,IAAI,IAAK;MAAE;MACpC,IAAIA,IAAI,EAAE;QACRK,eAAe,IAAI,CAAC;QACpB9B,eAAe,CAAC0B,IAAI,CAAC,YAAY,CAAC;MACpC,CAAC,MAAM;QACL1B,eAAe,CAAC0B,IAAI,CAAC,YAAY,CAAC;MACpC;IACF,CAAC,CAAC;IACF7B,uBAAuB,CAACiC,eAAe,CAAC;IACxCzC,oBAAoB,CAAC0C,iBAAiB,CAAC;IACvChC,oBAAoB,CAACE,UAAU,CAAC+B,MAAM,CAAC;IACvC7C,uBAAuB,CAACa,eAAe,CAAC;IACxCf,uBAAuB,CAACgB,UAAU,CAAC;IACnClB,YAAY,CAAC,KAAK,CAAC;IACnBE,uBAAuB,CAACgB,UAAU,CAAC;EACrC,CAAC,EAAE,CAACrB,cAAc,CAAC,CAAC;EAEpB,SAASqD,2BAA2B,GAAG;IACrC,oBACE;MAAA,uBACE,QAAC,kBAAkB;QACjB,YAAY,EAAGrD,cAAc,CAACsD,YAAc;QAC5C,OAAO,EAAGtD,cAAc,CAACuD,OAAS;QAClC,WAAW,EAAGvD,cAAc,CAACwD,WAAa;QAC1C,eAAe,EAAGxD,cAAc,CAACyD,eAAiB;QAClD,OAAO,EAAGzD,cAAc,CAAC0D,OAAS;QAClC,EAAE,EAAG3D,EAAI;QACT,oBAAoB,EAAGK,oBAAsB;QAC7C,oBAAoB,EAAGE,oBAAsB;QAC7C,iBAAiB,EAAGE,iBAAmB;QACvC,qBAAqB,EAAGM,qBAAuB;QAC/C,YAAY,EAAGJ,YAAc;QAC7B,eAAe,EAAGC,eAAiB;QACnC,aAAa,EAAGE,aAAe;QAC/B,oBAAoB,EAAGJ,oBAAsB;QAC7C,uBAAuB,EAAGF,uBAAyB;QACnD,uBAAuB,EAAGU,uBAAyB;QACnD,oBAAoB,EAAGD,oBAAsB;QAC7C,iBAAiB,EAAGE,iBAAmB;QACvC,wBAAwB,EAAGH,wBAA0B;QACrD,UAAU,EAAGH,UAAY;QACzB,OAAO,EAAGZ,cAAc,CAAC2D;MAAS;QAAA;QAAA;QAAA;MAAA;IAClC;MAAA;MAAA;MAAA;IAAA,QACE;EAEV;EAEA,oBACE;IAAA,uBACE;MAAA,UACIzD,OAAO,gBAAG;QAAA,UAAG;MAAa;QAAA;QAAA;QAAA;MAAA,QAAI,GAAGmD,2BAA2B;IAAE;MAAA;MAAA;MAAA;IAAA;EAC3D;IAAA;IAAA;IAAA;EAAA,QACH;AAEV;AAAC,GA7GQzD,qBAAqB;AAAA,KAArBA,qBAAqB;AA+G9BA,qBAAqB,CAACgE,SAAS,GAAG;EAChC/D,KAAK,EAAEL,SAAS,CAACqE,KAAK,CAAC;IACrB/D,MAAM,EAAEN,SAAS,CAACqE,KAAK,CAAC;MACtB9D,EAAE,EAAEP,SAAS,CAACsE;IAChB,CAAC;EACH,CAAC,CAAC,CAACC;AACL,CAAC;AAED,eAAenE,qBAAqB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}